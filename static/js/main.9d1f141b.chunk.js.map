{"version":3,"sources":["state/store.tsx","components/TextField/index.tsx","utils/checkBoard.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["Players","StoreContext","createContext","TextField","label","children","attrs","className","htmlFor","id","defaultProps","type","evaluateBoard","subarray","every","value","index","array","checkDynamicBoard","board","boardDimension","Math","sqrt","length","i","rows","slice","columns","filter","diagonalOne","map","diagonalTwo","Board","useContext","setBoard","moves","setMoves","player","setPlayer","winner","setWinner","moveLimit","useEffect","cell","key","onClick","tempBoard","prevState","handleClick","App","setBoardSize","boardSize","setMovelimit","useState","size","setSize","onChange","event","sizeInput","target","onKeyUp","pow","Array","fill","ReactDOM","render","Cross","document","body","style","setProperty","store","Provider","getElementById"],"mappings":"0NAEYA,E,gEAAAA,O,iBAAAA,I,oBAAAA,M,KAKL,IAAMC,EAAeC,wBAAmB,M,OCA/C,SAASC,EAAT,GAAqE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAwBC,GAAgB,EAA9BC,UAA8B,iDAClE,OACE,6BACGH,GACC,2BACEI,QAASF,EAAMG,IACfL,GAEF,0BAAWE,GACTD,GAKVF,EAAUO,aAAe,CACvBC,KAAM,UAGOR,QCxBTS,G,YAAgB,SAACC,GAErB,GACEA,EAASC,OACP,SAACC,EAAsBC,EAAeC,GAAtC,OACEF,IAAUE,EAAM,IAAgB,OAAVF,KAI1B,OADSF,EAAS,KAKTK,EAAoB,SAACC,GAIhC,IAFA,IAAMC,EAAiBC,KAAKC,KAAKH,EAAMI,QAF4B,WAI1DC,GAEP,IAAMC,EAAON,EAAMO,MACjBF,EAAIJ,EACJI,EAAIJ,EAAiBA,GAIjBO,EAAUR,EAAMS,QAAO,SAACb,EAAsBC,GAClD,OAAQA,EAAQQ,GAAKJ,IAAmB,KAIpCS,EAAcV,EACjBW,KAAI,SAACf,EAAsBC,EAAeC,GACzC,OAAOA,EAAMD,EAAQI,EAAiBJ,MAEvCU,MAAM,EAAGN,GAGNW,EAAcZ,EACjBW,KAAI,SAACf,EAAsBC,EAAeC,GACzC,OAAOA,EAAMG,EAAiB,GAAKA,EAAiB,GAAKJ,MAE1DU,MAAM,EAAGN,GAEZ,OAAIR,EAAca,GAAa,CAAN,EAAOb,EAAca,IAC1Cb,EAAce,GAAgB,CAAN,EAAOf,EAAce,IAC7Cf,EAAciB,GAAoB,CAAN,EAAOjB,EAAciB,IACjDjB,EAAcmB,GAAoB,CAAN,EAAOnB,EAAcmB,SAArD,GA7BOP,EAAI,EAAGA,EAAIJ,EAAgBI,IAAK,CAAC,IAAD,IAAhCA,GAAgC,oCCoC5BQ,EAhDD,WAAO,IAAD,EAWdC,qBAAWhC,GATbkB,EAFgB,EAEhBA,MACAe,EAHgB,EAGhBA,SACAC,EAJgB,EAIhBA,MACAC,EALgB,EAKhBA,SACAC,EANgB,EAMhBA,OACAC,EAPgB,EAOhBA,UACAC,EARgB,EAQhBA,OACAC,EATgB,EAShBA,UACAC,EAVgB,EAUhBA,UAGFC,qBAAU,WACJxB,EAAkBC,IACpBqB,EAAuC,IAA7BtB,EAAkBC,GAAe,WAAa,cACzD,CAACA,EAAOqB,IAeX,OACE,6BACE,yBAAKjC,UAAU,mBACZY,EAAMW,KAAI,SAACa,EAAW3B,GAAZ,OACT,yBACE4B,IAAK5B,EACLT,UAAU,aACVsC,QAAS,kBApBC,SAAC7B,GACnB,IAAIuB,GACAJ,IAAUM,IACVtB,EAAMH,GAAV,CAEA,IAAM8B,EAAS,YAAO3B,GACtB2B,EAAU9B,GAASqB,EACnBH,EAASY,GAETR,EAAqB,IAAXD,EAAe,EAAI,GAC7BD,GAAS,SAACW,GAAD,OAAoBA,EAAY,MAUlBC,CAAYhC,KAET,IAAjBG,EAAMH,GAAe,IAAuB,IAAjBG,EAAMH,GAAe,IAAM,YCwBpDiC,EAhEH,WAAO,IAAD,EAaZhB,qBAAWhC,GAVbiD,GAHc,EAEdC,UAFc,EAGdD,cACAhB,EAJc,EAIdA,SACAC,EALc,EAKdA,MACAC,EANc,EAMdA,SACAC,EAPc,EAOdA,OACAC,EARc,EAQdA,UACAC,EATc,EASdA,OACAC,EAVc,EAUdA,UACAC,EAXc,EAWdA,UACAW,EAZc,EAYdA,aAZc,EAeQC,mBAAS,GAfjB,mBAeTC,EAfS,KAeHC,EAfG,KAqChB,OACE,yBAAKhD,UAAU,OACb,2CACA,kDACA,6BACE,4BAAQsC,QAAS,kBAAMP,EAAU,KAAjC,KACA,4BAAQO,QAAS,kBAAMP,EAAU,KAAjC,MAEF,kBAAC,EAAD,CACEvB,MAAOuC,EACPE,SAvBN,SAAuBC,GACrB,IAAMC,EAAYD,EAAME,OAAO5C,MAC/BwC,EAAQG,IAsBJE,QAnBN,SAA0BH,GACN,UAAdA,EAAMb,MACRM,EAAa7B,KAAKwC,IAAIP,EAAM,IAC5BF,EAAa/B,KAAKwC,IAAIP,EAAM,IAC5BpB,EAAS,YAAI4B,MAAMzC,KAAKwC,IAAIP,EAAM,IAAIS,KAAK,YAiB1CxB,EACC,6CAAmBA,GACjBJ,IAAUM,EACZ,oCAEI,6BAAK,qCAAWJ,EAAX,WAEX,uCAAaF,GACb,4BAAQU,QAzCU,WACpBX,EAAS,YAAI4B,MAAMrB,GAAWsB,KAAK,QACnCzB,EAAqB,IAAXD,EAAe,EAAI,GAC7BD,EAAS,GACTI,EAAU,MAqCR,WACA,kBAAC,EAAD,QCxDNwB,IAASC,OACP,mBLDa,YAA8C,IAA3C5D,EAA0C,EAA1CA,SAA0C,EACxBgD,mBAAShC,KAAKwC,IAAI,EAAG,IADG,mBACnDV,EADmD,KACxCD,EADwC,OAGhCG,mBAAS,YAAIS,MAAMX,GAAWY,KAAK,QAHH,mBAGnD5C,EAHmD,KAG5Ce,EAH4C,OAI9BmB,mBAASrD,EAAQkE,OAJa,mBAInD7B,EAJmD,KAI3CC,EAJ2C,OAKhCe,mBAAS,GALuB,mBAKnDlB,EALmD,KAK5CC,EAL4C,OAMxBiB,mBAASF,GANe,mBAMnDV,EANmD,KAMxCW,EANwC,OAO9BC,mBAAS,IAPqB,mBAOnDd,EAPmD,KAO3CC,EAP2C,KAS1D2B,SAASC,KAAKC,MAAMC,YAAY,eAAhC,UAAmDjD,KAAKC,KAAK6B,KAE7D,IAAMoB,EAAQ,CACZpB,YACAD,eACA/B,QACAe,WACAG,SACAC,YACAH,QACAC,WACAG,SACAC,YACAC,YACAW,gBAGF,OACE,kBAACnD,EAAauE,SAAd,CAAuBzD,MAAOwD,GAAQlE,KK1BxC,KACE,kBAAC,EAAD,OAEF8D,SAASM,eAAe,W","file":"static/js/main.9d1f141b.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nexport enum Players {\r\n  Cross = 1,\r\n  Circle\r\n}\r\n\r\nexport const StoreContext = createContext<any>(null);\r\n\r\nexport default ({ children }: { children: JSX.Element }) => {\r\n  const [boardSize, setBoardSize] = useState(Math.pow(3, 2));\r\n\r\n  const [board, setBoard] = useState([...Array(boardSize).fill(null)]);\r\n  const [player, setPlayer] = useState(Players.Cross);\r\n  const [moves, setMoves] = useState(0);\r\n  const [moveLimit, setMovelimit] = useState(boardSize);\r\n  const [winner, setWinner] = useState(\"\");\r\n\r\n  document.body.style.setProperty(\"--board-size\", `${Math.sqrt(boardSize)}`);\r\n\r\n  const store = {\r\n    boardSize,\r\n    setBoardSize,\r\n    board,\r\n    setBoard,\r\n    player,\r\n    setPlayer,\r\n    moves,\r\n    setMoves,\r\n    winner,\r\n    setWinner,\r\n    moveLimit,\r\n    setMovelimit\r\n  };\r\n\r\n  return (\r\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n  );\r\n};\r\n","import React, { ReactNode, InputHTMLAttributes } from 'react';\r\n\r\ntype Props = {\r\n  label?: number,\r\n  children?: ReactNode\r\n} & InputHTMLAttributes<HTMLInputElement>\r\n\r\nfunction TextField({ label, children, className, ...attrs }: Props) {\r\n  return (\r\n    <div>\r\n      {label && (\r\n        <label\r\n          htmlFor={attrs.id}\r\n        >{label}</label>\r\n      )}\r\n        <input {...attrs} />\r\n        { children }\r\n    </div>\r\n  );\r\n}\r\n\r\nTextField.defaultProps = {\r\n  type: 'number'\r\n}\r\n\r\nexport default TextField;","// Check subarray if all are the same value and return the number if true\r\nconst evaluateBoard = (subarray: [any]): number | undefined => {\r\n  let winner;\r\n  if (\r\n    subarray.every(\r\n      (value: number | null, index: number, array: number[]) =>\r\n        value === array[0] && value !== null\r\n    )\r\n  ) {\r\n    winner = subarray[0];\r\n    return winner;\r\n  }\r\n};\r\n\r\nexport const checkDynamicBoard = (board: any): number | undefined => {\r\n  // \"Length\" of a side\r\n  const boardDimension = Math.sqrt(board.length);\r\n\r\n  for (let i = 0; i < boardDimension; i++) {\r\n    // Get rows\r\n    const rows = board.slice(\r\n      i * boardDimension,\r\n      i * boardDimension + boardDimension\r\n    );\r\n\r\n    // Get columns\r\n    const columns = board.filter((value: number | null, index: number) => {\r\n      return (index + i) % boardDimension === 0;\r\n    });\r\n\r\n    // Get left to right diagonal\r\n    const diagonalOne = board\r\n      .map((value: number | null, index: number, array: []) => {\r\n        return array[index + boardDimension * index];\r\n      })\r\n      .slice(0, boardDimension);\r\n\r\n    // Get right to left diagonal\r\n    const diagonalTwo = board\r\n      .map((value: number | null, index: number, array: []) => {\r\n        return array[boardDimension - 1 + (boardDimension - 1) * index];\r\n      })\r\n      .slice(0, boardDimension);\r\n\r\n    if (evaluateBoard(rows)) return evaluateBoard(rows);\r\n    if (evaluateBoard(columns)) return evaluateBoard(columns);\r\n    if (evaluateBoard(diagonalOne)) return evaluateBoard(diagonalOne);\r\n    if (evaluateBoard(diagonalTwo)) return evaluateBoard(diagonalTwo);\r\n  }\r\n};\r\n\r\n","import React, { useEffect, useContext, useState } from \"react\";\r\nimport \"./Board.css\";\r\n\r\nimport { StoreContext } from \"../state/store\";\r\nimport { checkDynamicBoard } from \"../utils/checkBoard\";\r\n\r\nconst Board = () => {\r\n  const {\r\n    board,\r\n    setBoard,\r\n    moves,\r\n    setMoves,\r\n    player,\r\n    setPlayer,\r\n    winner,\r\n    setWinner,\r\n    moveLimit\r\n  } = useContext(StoreContext);\r\n\r\n  useEffect(() => {\r\n    if (checkDynamicBoard(board))\r\n      setWinner(checkDynamicBoard(board) === 1 ? \"Player 1\" : \"Player 2\");\r\n  }, [board, setWinner]);\r\n\r\n  const handleClick = (index: number) => {\r\n    if (winner) return;\r\n    if (moves === moveLimit) return;\r\n    if (board[index]) return;\r\n\r\n    const tempBoard = [...board];\r\n    tempBoard[index] = player;\r\n    setBoard(tempBoard);\r\n\r\n    setPlayer(player === 1 ? 2 : 1);\r\n    setMoves((prevState: any) => prevState + 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board-container\">\r\n        {board.map((cell: any, index: number) => (\r\n          <div\r\n            key={index}\r\n            className=\"board-cell\"\r\n            onClick={() => handleClick(index)}\r\n          >\r\n            {board[index] === 1 ? \"x\" : board[index] === 2 ? \"o\" : null}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState, useContext } from \"react\";\r\nimport TextField from './components/TextField';\r\nimport \"./App.css\";\r\nimport { StoreContext } from \"./state/store\";\r\nimport Board from \"./components/Board\";\r\n\r\nconst App = () => {\r\n  const {\r\n    boardSize,\r\n    setBoardSize,\r\n    setBoard,\r\n    moves,\r\n    setMoves,\r\n    player,\r\n    setPlayer,\r\n    winner,\r\n    setWinner,\r\n    moveLimit,\r\n    setMovelimit\r\n  } = useContext(StoreContext);\r\n\r\n  const [size, setSize] = useState(3);\r\n\r\n  const handleRestart = () => {\r\n    setBoard([...Array(moveLimit).fill(null)]);\r\n    setPlayer(player === 1 ? 2 : 1);\r\n    setMoves(0);\r\n    setWinner(\"\");\r\n  };\r\n\r\n  function getInputValue(event: any) {\r\n    const sizeInput = event.target.value;\r\n    setSize(sizeInput);\r\n  }\r\n\r\n  function setFromInputSize(event: any) {\r\n    if (event.key === 'Enter') {\r\n      setBoardSize(Math.pow(size, 2))\r\n      setMovelimit(Math.pow(size, 2))\r\n      setBoard([...Array(Math.pow(size, 2)).fill(null)])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Tic Tac Toe</h1>\r\n      <div>Who will be first</div>\r\n      <div>\r\n        <button onClick={() => setPlayer(1)}>X</button>\r\n        <button onClick={() => setPlayer(2)}>O</button>\r\n      </div>\r\n      <TextField\r\n        value={size}\r\n        onChange={getInputValue}\r\n        onKeyUp={setFromInputSize}\r\n      />\r\n      {winner ? (\r\n        <h3>The winner is {winner}</h3>\r\n      ) : moves === moveLimit ? (\r\n        <h3>Draw</h3>\r\n      ) : (\r\n            <div><b>Player {player} turn.</b></div>\r\n          )}\r\n      <div>Moves: {moves}</div>\r\n      <button onClick={handleRestart}>Restart</button>\r\n      <Board />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport StoreProvider from \"./state/store\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <StoreProvider>\r\n    <App />\r\n  </StoreProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}